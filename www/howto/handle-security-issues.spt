nav_title = 'Handle Security Issues'
[---]
[---] text/html via markdown

*Are you a security researcher? Please visit our
[HackerOne page](https://hackerone.com/gratipay). This document is for
internal Gratipay collaborators.*


## HackerOne

We [use HackerOne](https://hackerone.com/gratipay) to manage our security
queue.

Be aware of [how HackerOne assigns
reputation](https://support.hackerone.com/hc/en-us/articles/205072269-What-affects-hacker-Reputation-).
In particular, if you need to reticket anything from a HackerOne report, have
the original researcher make the reticket so that they get the credit.  When
commenting on HackerOne, always use the &ldquo;All participants&rdquo; scope,
so that the conversation is made public when we disclose the ticket once it's
resolved.

&ldquo;Request public disclosure&rdquo; for all HackerOne tickets that you
close as &ldquo;Resolved&rdquo;, &ldquo;Informative&rdquo;, or &ldquo;Not
Applicable&rdquo;, as soon you close them. If the researcher does not raise any
objection, the report will be made public after 30 days. Use this time window
to explain our disclosure policy to the researcher if necessary.

Our program uses the [CVSS v3.0](https://www.first.org/cvss) severity categories:
None, Low, Medium, High, and Critical. Untriaged reports are of unknown
severity. When processing the queue, we should tend to work on issues in this
order: Critical, High, unknown, Medium, Low, None.

Don't use the &ldquo;Needs more info&rdquo; state on HackerOne, because it
doesn't show up across the top so it's easy for tickets to get lost in there.
Just use &ldquo;New&rdquo; (unclear risk) and &ldquo;Triaged&rdquo; (in one of
the four risk classifications).


## Incident Response

Some reports may require immediate action. In these cases incident response is 
triggered and the security team investigates the impact of the issue in the 
private #incident-response channel on [Slack](https://gratipay.slack.com/).

The following steps are taken during incident response:

- Notify all team members that you are triggering incident response.
- Identify what the issue is and all assets that are affected by the issue.
- Contain the problem. 
- Submit a patch.
- Verify that the issue has been patched.
- List all precautionary steps that could be taken in order to prevent a similar incident in future.


## Code Changes

For Low- and Medium-severity issues, you may use our normal public GitHub
workflow to make code changes (basically, submit a PR, label it
&ldquo;Review&rdquo;, and ping someone to review it).

Making code changes for High and Critical vulnerabilities is more complex,
because we want to avoid telegraphing the presence of such vulnerabilities
before they're fixed. Make changes in the [`security`
repo](https://github.com/gratipay/security) in a topic branch. Make a PR (in
the same repo) to help with code review, but don't actually comment on GitHub,
only comment on HackerOne. Why? We don't have per-PR permissions, so if we have
conversation in the `security` repo then it's not easy to disclose once the bug
is fixed. Keep all conversation on HackerOne, so that we can easily make it
public when we disclose the issue. If you find comments on PRs in the
`security` repo then please copy them to HackerOne and then delete them from
GitHub.

Once the fix is approved and the PR is merged to `master` in `security`, here's
how to deploy it:

 1. Announce your intention on [Slack](/appendices/chat) so that no-one else
deploys from the regular repo while you're deploying from `security`.

 1. Clone the `security` repo, then configure a couple more remotes:
```
git remote add upstream git@github.com:gratipay/gratipay.com.git
git remote add heroku git@heroku.com:gratipay.git
```

 1. Run `./deploy.sh` from your local copy of the `security` repo that has the
new fix on `master` (the deploy script exits if not run on `master`). After
pushing to Heroku, the deploy script will push to `master`'s default remote,
which should be the private `security` repo in this case.

 1. Once the fix is deployed and verified and you're ready to announce it to
the world, sync the public `gratipay.com` repo with the private `security`
repo, like so:
```
git push upstream && git push upstream --tags
```
